/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
@media screen and (min-width: 450px) {
  figure {
    float: left;
    width: 48.5%;
    margin-left: 0%;
    margin-right: 3%; }

  figure:nth-of-type(2n) {
    float: right;
    margin-right: 0%; }
 }

@media screen and (min-width: 450px) {
  figure {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 48.5%;
    margin-left: 0%;
    margin-right: 3%; }
    figure:before, figure:after {
      content: '';
      display: table; }
    figure:after {
      clear: both; }
    figure:nth-child(2n) {
      margin-right: 0%;
      float: right; }
    figure:nth-child(2n+1) {
      clear: both; }
 }

@media screen and (min-width: 800px) {
  figure {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 22.75%;
    margin-left: 0%;
    margin-right: 3%; }
    figure:before, figure:after {
      content: '';
      display: table; }
    figure:after {
      clear: both; }
    figure:nth-child(2n) {
      margin-right: 3%;
      float: left; }
    figure:nth-child(2n+1) {
      clear: none; }
    figure:nth-child(4n) {
      margin-right: 0%;
      float: right; }
    figure:nth-child(4n+1) {
      clear: both; }
 }

h1 {
  color: #8AB93A; }

h2 {
  font-family: 'Corben', Georgia, Times, serif;
  font-size: 16px;
  color: #8AB93A;
  padding: 0px 0px 0px 10px; }

h3 {
  font-family: 'Helvetica', sans-serif;
  font-style: thin;
  font-size: 16px;
  color: #76C7CD;
  padding: 10px 0px 0px 0px; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
@media screen and (min-width: 450px) {
  figure {
    float: left;
    width: 48.5%;
    margin-left: 0%;
    margin-right: 3%; }

  figure:nth-of-type(2n) {
    float: right;
    margin-right: 0%; }
 }

@media screen and (min-width: 450px) {
  figure {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 48.5%;
    margin-left: 0%;
    margin-right: 3%; }
    figure:before, figure:after {
      content: '';
      display: table; }
    figure:after {
      clear: both; }
    figure:nth-child(2n) {
      margin-right: 0%;
      float: right; }
    figure:nth-child(2n+1) {
      clear: both; }
 }

@media screen and (min-width: 800px) {
  figure {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 22.75%;
    margin-left: 0%;
    margin-right: 3%; }
    figure:before, figure:after {
      content: '';
      display: table; }
    figure:after {
      clear: both; }
    figure:nth-child(2n) {
      margin-right: 3%;
      float: left; }
    figure:nth-child(2n+1) {
      clear: none; }
    figure:nth-child(4n) {
      margin-right: 0%;
      float: right; }
    figure:nth-child(4n+1) {
      clear: both; }
 }

h1 {
  color: #8AB93A; }

h2 {
  font-family: 'Corben', Georgia, Times, serif;
  font-size: 16px;
  color: #8AB93A;
  padding: 0px 0px 0px 10px; }

h3 {
  font-family: 'Helvetica', sans-serif;
  font-style: thin;
  font-size: 16px;
  color: #76C7CD;
  padding: 10px 0px 0px 0px; }

.fm_1 {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 30.8144416457%;
  margin-left: 0%;
  margin-right: 3.7783375315%;
  background-color: white;
  margin: 0;
  color: #8AB93A;
  margin-bottom: 40px; }
  .fm_1:before, .fm_1:after {
    content: '';
    display: table; }
  .fm_1:after {
    clear: both; }
  .fm_1:last-child {
    margin-right: 0%; }

form {
  background-color: #ECFAD3;
  margin: 10px;
  padding: 15px;
  border-radius: 25px; }
  form label {
    display: block;
    color: #8AB93A; }
  form p {
    color: #8AB93A; }
  form input [type="radio"] {
    color: #8AB93A; }

.crumb_nav {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 65.4072208228%;
  margin-left: 0%;
  margin-right: 3.7783375315%;
  top-padding: 20px; }
  .crumb_nav:before, .crumb_nav:after {
    content: '';
    display: table; }
  .crumb_nav:after {
    clear: both; }
  .crumb_nav:last-child {
    margin-right: 0%; }
  .crumb_nav p {
    color: #8AB93A;
    top-margin: 10px;
    font-size: 1.25em; }

.sort-section {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 65.4072208228%;
  margin-left: 0%;
  margin-right: 3.7783375315%;
  margin: 0; }
  .sort-section:before, .sort-section:after {
    content: '';
    display: table; }
  .sort-section:after {
    clear: both; }
  .sort-section:last-child {
    margin-right: 0%; }
  .sort-section .sort_by {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 30.8144416457%;
    margin-left: 0%;
    margin-right: 3.7783375315%;
    display: inline-block;
    background-color: white;
    color: #8AB93A;
    margin: 0; }
    .sort-section .sort_by:before, .sort-section .sort_by:after {
      content: '';
      display: table; }
    .sort-section .sort_by:after {
      clear: both; }
    .sort-section .sort_by:last-child {
      margin-right: 0%; }
    .sort-section .sort_by select {
      display: inline;
      color: #8AB93A; }
  .sort-section .nav_results {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 65.4072208228%;
    margin-left: 0%;
    margin-right: 3.7783375315%;
    *zoom: 1;
    background-color: white;
    display: inline;
    text-align: right;
    padding: 0px 0px 0px 2px;
    float: right;
    margin: 0; }
    .sort-section .nav_results:before, .sort-section .nav_results:after {
      content: '';
      display: table; }
    .sort-section .nav_results:after {
      clear: both; }
    .sort-section .nav_results:last-child {
      margin-right: 0%; }
    .sort-section .nav_results:before, .sort-section .nav_results:after {
      content: '';
      display: table; }
    .sort-section .nav_results:after {
      clear: both; }
    .sort-section .nav_results a {
      color: #8AB93A;
      text-decoration: none;
      padding: 5px; }
  .sort-section #itemDisplay {
    *zoom: 1;
    padding-top: 50px; }
    .sort-section #itemDisplay:before, .sort-section #itemDisplay:after {
      content: '';
      display: table; }
    .sort-section #itemDisplay:after {
      clear: both; }
    .sort-section #itemDisplay figure {
      background-color: #ECFAD3;
      font-size: 0.8em;
      color: #8AB93A;
      text-align: center; }
      .sort-section #itemDisplay figure img {
        max-width: 100px;
        max-height: 100px; }

body {
  *zoom: 1;
  width: auto;
  max-width: 1;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  font-family: Arial;
  background-color: #77CCD2; }
  body:before, body:after {
    content: '';
    display: table; }
  body:after {
    clear: both; }

.top_teal {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 100%;
  margin-left: 0%;
  margin-right: 3%;
  background-color: #D6F1F0;
  margin: -10px 0px; }
  .top_teal:before, .top_teal:after {
    content: '';
    display: table; }
  .top_teal:after {
    clear: both; }
  .top_teal:last-child {
    margin-right: 0%; }

ul {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 74.25%;
  margin-left: 0%;
  margin-right: 3%;
  position: relative;
  left: 12.875%;
  text-align: right; }
  ul:before, ul:after {
    content: '';
    display: table; }
  ul:after {
    clear: both; }
  ul:last-child {
    margin-right: 0%; }

li {
  list-style: none;
  display: inline;
  color: #5FAEB4; }

.top_white {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 80%;
  margin-left: 0%;
  margin-right: 0%;
  position: relative;
  left: 10.3%;
  *zoom: 1;
  background-color: #fff;
  border-radius: 50px 50px 0px 0px;
  color: #D6F1F0;
  padding: 0px; }
  .top_white:before, .top_white:after {
    content: '';
    display: table; }
  .top_white:after {
    clear: both; }
  .top_white:before, .top_white:after {
    content: '';
    display: table; }
  .top_white:after {
    clear: both; }
  .top_white .tw_1 img {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 50%;
    margin-left: 0%;
    margin-right: 0%;
    margin-top: -6%;
    margin-bottom: 1%; }
    .top_white .tw_1 img:before, .top_white .tw_1 img:after {
      content: '';
      display: table; }
    .top_white .tw_1 img:after {
      clear: both; }
    @media (max-width: 50em) {
      .top_white .tw_1 img {
        display: block;
        clear: both;
        float: none;
        width: 100%;
        margin-left: auto;
        margin-right: auto;
        margin-top: -12%;
        margin-bottom: 1%; }
        .top_white .tw_1 img:first-child {
          margin-left: auto; }
        .top_white .tw_1 img:last-child {
          margin-right: auto; } }
  .top_white .tw_2 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 50%;
    margin-left: 0%;
    margin-right: 0%; }
    .top_white .tw_2:before, .top_white .tw_2:after {
      content: '';
      display: table; }
    .top_white .tw_2:after {
      clear: both; }
    @media (max-width: 50em) {
      .top_white .tw_2 {
        display: block;
        clear: both;
        float: none;
        width: 100%;
        margin-left: auto;
        margin-right: auto; }
        .top_white .tw_2:first-child {
          margin-left: auto; }
        .top_white .tw_2:last-child {
          margin-right: auto; } }
    .top_white .tw_2 ul {
      padding: 0px;
      width: 100%;
      position: center; }
    .top_white .tw_2 li {
      *zoom: 1;
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 19.109947644%;
      margin-left: 0%;
      margin-right: 7.8534031414%;
      list-style: none;
      display: inline;
      font-family: 'Helvetica';
      font-weight: lighter;
      font-size: 16px;
      color: #5FAEB4;
      text-align: center;
      border-radius: 50px;
      padding: 1% 1% 0.4% 1%;
      margin: 0 0.15%; }
      .top_white .tw_2 li:before, .top_white .tw_2 li:after {
        content: '';
        display: table; }
      .top_white .tw_2 li:after {
        clear: both; }
      .top_white .tw_2 li:before, .top_white .tw_2 li:after {
        content: '';
        display: table; }
      .top_white .tw_2 li:after {
        clear: both; }
      .top_white .tw_2 li:last-child {
        margin-right: 0%; }
  .top_white li:nth-child(1) {
    background-color: #77CCD1;
    color: #FFF; }
  .top_white li:nth-child(2) {
    background-color: #8AB93A;
    color: #FFF; }
  .top_white li:nth-child(3) {
    background-color: #71288C;
    color: #FFF; }
  .top_white li:nth-child(4) {
    background-color: #EB008A;
    color: #FFF; }
  .top_white .tw_3 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 50%;
    margin-left: 0%;
    margin-right: 0%;
    height: 50%;
    vertical-align: middle; }
    .top_white .tw_3:before, .top_white .tw_3:after {
      content: '';
      display: table; }
    .top_white .tw_3:after {
      clear: both; }
    @media (max-width: 50em) {
      .top_white .tw_3 {
        display: block;
        clear: both;
        float: none;
        width: 100%;
        margin-left: auto;
        margin-right: auto; }
        .top_white .tw_3:first-child {
          margin-left: auto; }
        .top_white .tw_3:last-child {
          margin-right: auto; } }
    .top_white .tw_3 img {
      vertical-align: middle;
      max-width: 100%; }

.pink_bar {
  *zoom: 1;
  width: auto;
  max-width: 1;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  background-color: #F5CAD2;
  font-family: 'Corben', Georgia, Times, serif;
  font-size: 12px;
  font-style: thick; }
  .pink_bar:before, .pink_bar:after {
    content: '';
    display: table; }
  .pink_bar:after {
    clear: both; }
  .pink_bar ul {
    *zoom: 1;
    text-align: center;
    padding: 3px 0px 0px 0px;
    margin: 2px; }
    .pink_bar ul:before, .pink_bar ul:after {
      content: '';
      display: table; }
    .pink_bar ul:after {
      clear: both; }
    .pink_bar ul li {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 16.3125%;
      margin-left: 0%;
      margin-right: 3%;
      list-style: none;
      display: inline;
      color: #6E0F47;
      margin: 0px;
      white-space: nowrap;
      padding: 9px 0px 0px 0px; }
      .pink_bar ul li:before, .pink_bar ul li:after {
        content: '';
        display: table; }
      .pink_bar ul li:after {
        clear: both; }
      .pink_bar ul li:last-child {
        margin-right: 0%; }
      .pink_bar ul li input {
        *zoom: 1;
        float: left;
        clear: none;
        text-align: inherit;
        width: 14.1666666667%;
        margin-left: 0%;
        margin-right: 3%;
        padding: 0px;
        border-radius: 15px;
        margin: 0px 0px 0px 20px;
        width: 100%; }
        .pink_bar ul li input:before, .pink_bar ul li input:after {
          content: '';
          display: table; }
        .pink_bar ul li input:after {
          clear: both; }
        .pink_bar ul li input:last-child {
          margin-right: 0%; }

.bottom_white {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 80%;
  margin-left: 0%;
  margin-right: 0%;
  position: relative;
  left: 10.3%;
  background-color: #fff;
  border-radius: 0px 0px 50px 50px;
  padding: 0px 0px 0px 0px; }
  .bottom_white:before, .bottom_white:after {
    content: '';
    display: table; }
  .bottom_white:after {
    clear: both; }
  .bottom_white .bt_1 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 50%;
    margin-left: 0%;
    margin-right: 0%;
    padding: 15px 0px 0px 0px;
    margin: 0px; }
    .bottom_white .bt_1:before, .bottom_white .bt_1:after {
      content: '';
      display: table; }
    .bottom_white .bt_1:after {
      clear: both; }
    .bottom_white .bt_1 .pic1 {
      margin: 0px;
      float: left;
      padding: 10px, 0px, 0px, 0px; }
    .bottom_white .bt_1 .pic2 {
      margin: 0px;
      padding: 15px 3px 0px 0px;
      width: 100%; }
    .bottom_white .bt_1 .pic3 {
      float: right;
      padding: 100px 0px 75px 20px;
      margin: 0px; }
  .bottom_white .bt_2 {
    *zoom: 1;
    margin: 0px;
    padding: 20px 0px 0px 0px; }
    .bottom_white .bt_2:before, .bottom_white .bt_2:after {
      content: '';
      display: table; }
    .bottom_white .bt_2:after {
      clear: both; }
  .bottom_white .bt_2 img {
    *zoom: 1;
    width: auto;
    max-width: 1410px;
    float: none;
    display: block;
    margin-right: auto;
    margin-left: auto;
    padding-left: 0;
    padding-right: 0;
    display: block;
    width: auto;
    padding: 0.75% 0px 0.75% 0px; }
    .bottom_white .bt_2 img:before, .bottom_white .bt_2 img:after {
      content: '';
      display: table; }
    .bottom_white .bt_2 img:after {
      clear: both; }
  .bottom_white .bt_3 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 100%;
    margin-left: 0%;
    margin-right: 0%;
    background-image: url("https://raw.githubusercontent.com/elizabrock/SavingsMultipliedRedux/master/app/assets/images/homepage/dotted_line_44x9.png");
    background-repeat: repeat-x;
    padding: 20px 0px 20px 0px; }
    .bottom_white .bt_3:before, .bottom_white .bt_3:after {
      content: '';
      display: table; }
    .bottom_white .bt_3:after {
      clear: both; }
  .bottom_white .pic4 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 25%;
    margin-left: 0%;
    margin-right: 0%;
    display: block;
    margin-left: auto;
    margin-right: auto; }
    .bottom_white .pic4:before, .bottom_white .pic4:after {
      content: '';
      display: table; }
    .bottom_white .pic4:after {
      clear: both; }

.bottom_teal {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 100%;
  margin-left: 0%;
  margin-right: 3%;
  *zoom: 1;
  width: auto;
  max-width: 1410px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  background-color: #77CCD2;
  padding: 40px 0px;
  font-size: 12px; }
  .bottom_teal:before, .bottom_teal:after {
    content: '';
    display: table; }
  .bottom_teal:after {
    clear: both; }
  .bottom_teal:last-child {
    margin-right: 0%; }
  .bottom_teal:before, .bottom_teal:after {
    content: '';
    display: table; }
  .bottom_teal:after {
    clear: both; }
  .bottom_teal ul {
    *zoom: 1;
    text-align: center;
    padding: 0px; }
    .bottom_teal ul:before, .bottom_teal ul:after {
      content: '';
      display: table; }
    .bottom_teal ul:after {
      clear: both; }
    .bottom_teal ul li:nth-child(odd) {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 6.785%;
      margin-left: 0%;
      margin-right: 3%;
      span: 0.2;
      position: relative;
      left: 12.875%;
      color: #D6F1F0; }
      .bottom_teal ul li:nth-child(odd):before, .bottom_teal ul li:nth-child(odd):after {
        content: '';
        display: table; }
      .bottom_teal ul li:nth-child(odd):after {
        clear: both; }
      .bottom_teal ul li:nth-child(odd):last-child {
        margin-right: 0%; }
    .bottom_teal ul li:nth-child(even) {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: -0.425%;
      margin-left: 0%;
      margin-right: 3%;
      position: relative;
      left: 12.875%;
      color: #D6F1F0; }
      .bottom_teal ul li:nth-child(even):before, .bottom_teal ul li:nth-child(even):after {
        content: '';
        display: table; }
      .bottom_teal ul li:nth-child(even):after {
        clear: both; }
      .bottom_teal ul li:nth-child(even):last-child {
        margin-right: 0%; }
    .bottom_teal ul li {
      list-style: none;
      display: inline-block;
      padding: 0px;
      margin: 0px; }

/*# sourceMappingURL=main.css.map */